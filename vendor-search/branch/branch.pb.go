// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: vendor-search/branch/branch.proto

package branch

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Branch_Metadata_ActionType int32

const (
	Branch_Metadata_CREATE Branch_Metadata_ActionType = 0
	Branch_Metadata_UPDATE Branch_Metadata_ActionType = 1
	Branch_Metadata_DELETE Branch_Metadata_ActionType = 2
)

// Enum value maps for Branch_Metadata_ActionType.
var (
	Branch_Metadata_ActionType_name = map[int32]string{
		0: "CREATE",
		1: "UPDATE",
		2: "DELETE",
	}
	Branch_Metadata_ActionType_value = map[string]int32{
		"CREATE": 0,
		"UPDATE": 1,
		"DELETE": 2,
	}
)

func (x Branch_Metadata_ActionType) Enum() *Branch_Metadata_ActionType {
	p := new(Branch_Metadata_ActionType)
	*p = x
	return p
}

func (x Branch_Metadata_ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Branch_Metadata_ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_vendor_search_branch_branch_proto_enumTypes[0].Descriptor()
}

func (Branch_Metadata_ActionType) Type() protoreflect.EnumType {
	return &file_vendor_search_branch_branch_proto_enumTypes[0]
}

func (x Branch_Metadata_ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Branch_Metadata_ActionType.Descriptor instead.
func (Branch_Metadata_ActionType) EnumDescriptor() ([]byte, []int) {
	return file_vendor_search_branch_branch_proto_rawDescGZIP(), []int{0, 0, 0}
}

type Branch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata                    *Branch_Metadata       `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Id                          uint32                 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	RestaurantId                uint32                 `protobuf:"varint,3,opt,name=restaurant_id,json=restaurantId,proto3" json:"restaurant_id,omitempty"`
	LocalId                     uint32                 `protobuf:"varint,4,opt,name=local_id,json=localId,proto3" json:"local_id,omitempty"`
	Location                    *Branch_Location       `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	CreatedAt                   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt                   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Enabled                     bool                   `protobuf:"varint,8,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Defaultstatus               uint32                 `protobuf:"varint,9,opt,name=defaultstatus,proto3" json:"defaultstatus,omitempty"`
	Branchtype                  uint32                 `protobuf:"varint,10,opt,name=branchtype,proto3" json:"branchtype,omitempty"`
	Pickup                      bool                   `protobuf:"varint,11,opt,name=pickup,proto3" json:"pickup,omitempty"`
	WorkingTimeId               uint32                 `protobuf:"varint,12,opt,name=working_time_id,json=workingTimeId,proto3" json:"working_time_id,omitempty"`
	PrinterId                   uint32                 `protobuf:"varint,13,opt,name=printer_id,json=printerId,proto3" json:"printer_id,omitempty"`
	AcceptCreditCard            bool                   `protobuf:"varint,14,opt,name=accept_credit_card,json=acceptCreditCard,proto3" json:"accept_credit_card,omitempty"`
	CompanyId                   uint32                 `protobuf:"varint,15,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	PublicPhoneNumber           uint32                 `protobuf:"varint,16,opt,name=public_phone_number,json=publicPhoneNumber,proto3" json:"public_phone_number,omitempty"`
	FollowUpMinutes             uint32                 `protobuf:"varint,17,opt,name=follow_up_minutes,json=followUpMinutes,proto3" json:"follow_up_minutes,omitempty"`
	BillingGroupId              uint32                 `protobuf:"varint,18,opt,name=billing_group_id,json=billingGroupId,proto3" json:"billing_group_id,omitempty"`
	AcceptCashOnDelivery        bool                   `protobuf:"varint,19,opt,name=accept_cash_on_delivery,json=acceptCashOnDelivery,proto3" json:"accept_cash_on_delivery,omitempty"`
	MenuId                      uint32                 `protobuf:"varint,20,opt,name=menu_id,json=menuId,proto3" json:"menu_id,omitempty"`
	SubWorkingTimeId            uint32                 `protobuf:"varint,21,opt,name=sub_working_time_id,json=subWorkingTimeId,proto3" json:"sub_working_time_id,omitempty"`
	DeliverUsingMap             bool                   `protobuf:"varint,22,opt,name=deliver_using_map,json=deliverUsingMap,proto3" json:"deliver_using_map,omitempty"`
	AcceptVoucher               bool                   `protobuf:"varint,23,opt,name=accept_voucher,json=acceptVoucher,proto3" json:"accept_voucher,omitempty"`
	ReferenceId                 string                 `protobuf:"bytes,24,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
	ReferenceName               string                 `protobuf:"bytes,25,opt,name=reference_name,json=referenceName,proto3" json:"reference_name,omitempty"`
	ReferenceNameAr             string                 `protobuf:"bytes,26,opt,name=reference_name_ar,json=referenceNameAr,proto3" json:"reference_name_ar,omitempty"`
	Grade                       float64                `protobuf:"fixed64,27,opt,name=grade,proto3" json:"grade,omitempty"`
	DeliveryProvider            uint32                 `protobuf:"varint,28,opt,name=delivery_provider,json=deliveryProvider,proto3" json:"delivery_provider,omitempty"`
	HelloFoodVendorCode         uint32                 `protobuf:"varint,29,opt,name=hello_food_vendor_code,json=helloFoodVendorCode,proto3" json:"hello_food_vendor_code,omitempty"`
	OwnDeliveryConditionGroupId uint32                 `protobuf:"varint,30,opt,name=own_delivery_condition_group_id,json=ownDeliveryConditionGroupId,proto3" json:"own_delivery_condition_group_id,omitempty"`
	PaymentAtRestaurant         bool                   `protobuf:"varint,31,opt,name=payment_at_restaurant,json=paymentAtRestaurant,proto3" json:"payment_at_restaurant,omitempty"`
	LinkToken                   uint32                 `protobuf:"varint,32,opt,name=link_token,json=linkToken,proto3" json:"link_token,omitempty"`
	DontAcceptCash              bool                   `protobuf:"varint,33,opt,name=dont_accept_cash,json=dontAcceptCash,proto3" json:"dont_accept_cash,omitempty"`
	ExcludeFromPenalty          bool                   `protobuf:"varint,34,opt,name=exclude_from_penalty,json=excludeFromPenalty,proto3" json:"exclude_from_penalty,omitempty"`
	PayByTransmitter            bool                   `protobuf:"varint,35,opt,name=pay_by_transmitter,json=payByTransmitter,proto3" json:"pay_by_transmitter,omitempty"`
	EnabledReason               uint32                 `protobuf:"varint,36,opt,name=enabled_reason,json=enabledReason,proto3" json:"enabled_reason,omitempty"`
	SuperEta                    uint32                 `protobuf:"varint,37,opt,name=super_eta,json=superEta,proto3" json:"super_eta,omitempty"`
	PayLater                    bool                   `protobuf:"varint,38,opt,name=pay_later,json=payLater,proto3" json:"pay_later,omitempty"`
	PayAtDeliveryEnabled        bool                   `protobuf:"varint,39,opt,name=pay_at_delivery_enabled,json=payAtDeliveryEnabled,proto3" json:"pay_at_delivery_enabled,omitempty"`
	SalesforceGrid              uint32                 `protobuf:"varint,40,opt,name=salesforce_grid,json=salesforceGrid,proto3" json:"salesforce_grid,omitempty"`
	StatusUpdatedAt             *timestamppb.Timestamp `protobuf:"bytes,41,opt,name=status_updated_at,json=statusUpdatedAt,proto3" json:"status_updated_at,omitempty"`
	CurrentStatus               uint32                 `protobuf:"varint,42,opt,name=current_status,json=currentStatus,proto3" json:"current_status,omitempty"`
	SalesforceId                uint32                 `protobuf:"varint,43,opt,name=salesforce_id,json=salesforceId,proto3" json:"salesforce_id,omitempty"`
	SfAccountReferenceId        uint32                 `protobuf:"varint,44,opt,name=sf_account_reference_id,json=sfAccountReferenceId,proto3" json:"sf_account_reference_id,omitempty"`
	DisableOrderNote            bool                   `protobuf:"varint,45,opt,name=disable_order_note,json=disableOrderNote,proto3" json:"disable_order_note,omitempty"`
	CommissionBase              uint32                 `protobuf:"varint,46,opt,name=commission_base,json=commissionBase,proto3" json:"commission_base,omitempty"`
	FinanceSpecefication        uint32                 `protobuf:"varint,47,opt,name=finance_specefication,json=financeSpecefication,proto3" json:"finance_specefication,omitempty"`
	CompanyBankAccountId        uint32                 `protobuf:"varint,48,opt,name=company_bank_account_id,json=companyBankAccountId,proto3" json:"company_bank_account_id,omitempty"`
	IsNew                       bool                   `protobuf:"varint,49,opt,name=is_new,json=isNew,proto3" json:"is_new,omitempty"`
	PreferredLanguage           uint32                 `protobuf:"varint,50,opt,name=preferred_language,json=preferredLanguage,proto3" json:"preferred_language,omitempty"`
}

func (x *Branch) Reset() {
	*x = Branch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vendor_search_branch_branch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Branch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Branch) ProtoMessage() {}

func (x *Branch) ProtoReflect() protoreflect.Message {
	mi := &file_vendor_search_branch_branch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Branch.ProtoReflect.Descriptor instead.
func (*Branch) Descriptor() ([]byte, []int) {
	return file_vendor_search_branch_branch_proto_rawDescGZIP(), []int{0}
}

func (x *Branch) GetMetadata() *Branch_Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Branch) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Branch) GetRestaurantId() uint32 {
	if x != nil {
		return x.RestaurantId
	}
	return 0
}

func (x *Branch) GetLocalId() uint32 {
	if x != nil {
		return x.LocalId
	}
	return 0
}

func (x *Branch) GetLocation() *Branch_Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Branch) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Branch) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Branch) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Branch) GetDefaultstatus() uint32 {
	if x != nil {
		return x.Defaultstatus
	}
	return 0
}

func (x *Branch) GetBranchtype() uint32 {
	if x != nil {
		return x.Branchtype
	}
	return 0
}

func (x *Branch) GetPickup() bool {
	if x != nil {
		return x.Pickup
	}
	return false
}

func (x *Branch) GetWorkingTimeId() uint32 {
	if x != nil {
		return x.WorkingTimeId
	}
	return 0
}

func (x *Branch) GetPrinterId() uint32 {
	if x != nil {
		return x.PrinterId
	}
	return 0
}

func (x *Branch) GetAcceptCreditCard() bool {
	if x != nil {
		return x.AcceptCreditCard
	}
	return false
}

func (x *Branch) GetCompanyId() uint32 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *Branch) GetPublicPhoneNumber() uint32 {
	if x != nil {
		return x.PublicPhoneNumber
	}
	return 0
}

func (x *Branch) GetFollowUpMinutes() uint32 {
	if x != nil {
		return x.FollowUpMinutes
	}
	return 0
}

func (x *Branch) GetBillingGroupId() uint32 {
	if x != nil {
		return x.BillingGroupId
	}
	return 0
}

func (x *Branch) GetAcceptCashOnDelivery() bool {
	if x != nil {
		return x.AcceptCashOnDelivery
	}
	return false
}

func (x *Branch) GetMenuId() uint32 {
	if x != nil {
		return x.MenuId
	}
	return 0
}

func (x *Branch) GetSubWorkingTimeId() uint32 {
	if x != nil {
		return x.SubWorkingTimeId
	}
	return 0
}

func (x *Branch) GetDeliverUsingMap() bool {
	if x != nil {
		return x.DeliverUsingMap
	}
	return false
}

func (x *Branch) GetAcceptVoucher() bool {
	if x != nil {
		return x.AcceptVoucher
	}
	return false
}

func (x *Branch) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

func (x *Branch) GetReferenceName() string {
	if x != nil {
		return x.ReferenceName
	}
	return ""
}

func (x *Branch) GetReferenceNameAr() string {
	if x != nil {
		return x.ReferenceNameAr
	}
	return ""
}

func (x *Branch) GetGrade() float64 {
	if x != nil {
		return x.Grade
	}
	return 0
}

func (x *Branch) GetDeliveryProvider() uint32 {
	if x != nil {
		return x.DeliveryProvider
	}
	return 0
}

func (x *Branch) GetHelloFoodVendorCode() uint32 {
	if x != nil {
		return x.HelloFoodVendorCode
	}
	return 0
}

func (x *Branch) GetOwnDeliveryConditionGroupId() uint32 {
	if x != nil {
		return x.OwnDeliveryConditionGroupId
	}
	return 0
}

func (x *Branch) GetPaymentAtRestaurant() bool {
	if x != nil {
		return x.PaymentAtRestaurant
	}
	return false
}

func (x *Branch) GetLinkToken() uint32 {
	if x != nil {
		return x.LinkToken
	}
	return 0
}

func (x *Branch) GetDontAcceptCash() bool {
	if x != nil {
		return x.DontAcceptCash
	}
	return false
}

func (x *Branch) GetExcludeFromPenalty() bool {
	if x != nil {
		return x.ExcludeFromPenalty
	}
	return false
}

func (x *Branch) GetPayByTransmitter() bool {
	if x != nil {
		return x.PayByTransmitter
	}
	return false
}

func (x *Branch) GetEnabledReason() uint32 {
	if x != nil {
		return x.EnabledReason
	}
	return 0
}

func (x *Branch) GetSuperEta() uint32 {
	if x != nil {
		return x.SuperEta
	}
	return 0
}

func (x *Branch) GetPayLater() bool {
	if x != nil {
		return x.PayLater
	}
	return false
}

func (x *Branch) GetPayAtDeliveryEnabled() bool {
	if x != nil {
		return x.PayAtDeliveryEnabled
	}
	return false
}

func (x *Branch) GetSalesforceGrid() uint32 {
	if x != nil {
		return x.SalesforceGrid
	}
	return 0
}

func (x *Branch) GetStatusUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StatusUpdatedAt
	}
	return nil
}

func (x *Branch) GetCurrentStatus() uint32 {
	if x != nil {
		return x.CurrentStatus
	}
	return 0
}

func (x *Branch) GetSalesforceId() uint32 {
	if x != nil {
		return x.SalesforceId
	}
	return 0
}

func (x *Branch) GetSfAccountReferenceId() uint32 {
	if x != nil {
		return x.SfAccountReferenceId
	}
	return 0
}

func (x *Branch) GetDisableOrderNote() bool {
	if x != nil {
		return x.DisableOrderNote
	}
	return false
}

func (x *Branch) GetCommissionBase() uint32 {
	if x != nil {
		return x.CommissionBase
	}
	return 0
}

func (x *Branch) GetFinanceSpecefication() uint32 {
	if x != nil {
		return x.FinanceSpecefication
	}
	return 0
}

func (x *Branch) GetCompanyBankAccountId() uint32 {
	if x != nil {
		return x.CompanyBankAccountId
	}
	return 0
}

func (x *Branch) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *Branch) GetPreferredLanguage() uint32 {
	if x != nil {
		return x.PreferredLanguage
	}
	return 0
}

type Branch_Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid           string                     `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Source         string                     `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Action         Branch_Metadata_ActionType `protobuf:"varint,3,opt,name=action,proto3,enum=Branch_Metadata_ActionType" json:"action,omitempty"`
	EventTimestamp *timestamppb.Timestamp     `protobuf:"bytes,4,opt,name=event_timestamp,json=eventTimestamp,proto3" json:"event_timestamp,omitempty"`
}

func (x *Branch_Metadata) Reset() {
	*x = Branch_Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vendor_search_branch_branch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Branch_Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Branch_Metadata) ProtoMessage() {}

func (x *Branch_Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_vendor_search_branch_branch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Branch_Metadata.ProtoReflect.Descriptor instead.
func (*Branch_Metadata) Descriptor() ([]byte, []int) {
	return file_vendor_search_branch_branch_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Branch_Metadata) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

func (x *Branch_Metadata) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Branch_Metadata) GetAction() Branch_Metadata_ActionType {
	if x != nil {
		return x.Action
	}
	return Branch_Metadata_CREATE
}

func (x *Branch_Metadata) GetEventTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTimestamp
	}
	return nil
}

type Branch_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *Branch_Location) Reset() {
	*x = Branch_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vendor_search_branch_branch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Branch_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Branch_Location) ProtoMessage() {}

func (x *Branch_Location) ProtoReflect() protoreflect.Message {
	mi := &file_vendor_search_branch_branch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Branch_Location.ProtoReflect.Descriptor instead.
func (*Branch_Location) Descriptor() ([]byte, []int) {
	return file_vendor_search_branch_branch_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Branch_Location) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Branch_Location) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

var File_vendor_search_branch_branch_proto protoreflect.FileDescriptor

var file_vendor_search_branch_branch_proto_rawDesc = []byte{
	0x0a, 0x21, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x2d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x12, 0x0a, 0x06, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12,
	0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a,
	0x11, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x75, 0x70, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x55, 0x70, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x63, 0x61,
	0x73, 0x68, 0x5f, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x61, 0x73, 0x68,
	0x4f, 0x6e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x65,
	0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6d, 0x65, 0x6e,
	0x75, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x75, 0x62, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x73, 0x75, 0x62, 0x57, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x56, 0x6f,
	0x75, 0x63, 0x68, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x61, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x33,
	0x0a, 0x16, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x5f, 0x66, 0x6f, 0x6f, 0x64, 0x5f, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13,
	0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x46, 0x6f, 0x6f, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x1f, 0x6f, 0x77, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x6f, 0x77,
	0x6e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61,
	0x6e, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x74, 0x52, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x10,
	0x64, 0x6f, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x63, 0x61, 0x73, 0x68,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x6f, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x43, 0x61, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x79, 0x5f,
	0x62, 0x79, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x61, 0x79, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x65, 0x74, 0x61, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x73, 0x75, 0x70, 0x65, 0x72, 0x45, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x79, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70,
	0x61, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x61, 0x79, 0x5f, 0x61,
	0x74, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x70, 0x61, 0x79, 0x41, 0x74, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x69,
	0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x47, 0x72, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73,
	0x61, 0x6c, 0x65, 0x73, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x73,
	0x66, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x66,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x15, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x65, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x65, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x2d, 0x0a, 0x12,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x1a, 0xe2, 0x01, 0x0a, 0x08,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x30,
	0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02,
	0x1a, 0x44, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x42, 0x16, 0x5a, 0x14, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x2d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vendor_search_branch_branch_proto_rawDescOnce sync.Once
	file_vendor_search_branch_branch_proto_rawDescData = file_vendor_search_branch_branch_proto_rawDesc
)

func file_vendor_search_branch_branch_proto_rawDescGZIP() []byte {
	file_vendor_search_branch_branch_proto_rawDescOnce.Do(func() {
		file_vendor_search_branch_branch_proto_rawDescData = protoimpl.X.CompressGZIP(file_vendor_search_branch_branch_proto_rawDescData)
	})
	return file_vendor_search_branch_branch_proto_rawDescData
}

var file_vendor_search_branch_branch_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_vendor_search_branch_branch_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_vendor_search_branch_branch_proto_goTypes = []interface{}{
	(Branch_Metadata_ActionType)(0), // 0: Branch.Metadata.ActionType
	(*Branch)(nil),                  // 1: Branch
	(*Branch_Metadata)(nil),         // 2: Branch.Metadata
	(*Branch_Location)(nil),         // 3: Branch.Location
	(*timestamppb.Timestamp)(nil),   // 4: google.protobuf.Timestamp
}
var file_vendor_search_branch_branch_proto_depIdxs = []int32{
	2, // 0: Branch.metadata:type_name -> Branch.Metadata
	3, // 1: Branch.location:type_name -> Branch.Location
	4, // 2: Branch.created_at:type_name -> google.protobuf.Timestamp
	4, // 3: Branch.updated_at:type_name -> google.protobuf.Timestamp
	4, // 4: Branch.status_updated_at:type_name -> google.protobuf.Timestamp
	0, // 5: Branch.Metadata.action:type_name -> Branch.Metadata.ActionType
	4, // 6: Branch.Metadata.event_timestamp:type_name -> google.protobuf.Timestamp
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_vendor_search_branch_branch_proto_init() }
func file_vendor_search_branch_branch_proto_init() {
	if File_vendor_search_branch_branch_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vendor_search_branch_branch_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Branch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vendor_search_branch_branch_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Branch_Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vendor_search_branch_branch_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Branch_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vendor_search_branch_branch_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vendor_search_branch_branch_proto_goTypes,
		DependencyIndexes: file_vendor_search_branch_branch_proto_depIdxs,
		EnumInfos:         file_vendor_search_branch_branch_proto_enumTypes,
		MessageInfos:      file_vendor_search_branch_branch_proto_msgTypes,
	}.Build()
	File_vendor_search_branch_branch_proto = out.File
	file_vendor_search_branch_branch_proto_rawDesc = nil
	file_vendor_search_branch_branch_proto_goTypes = nil
	file_vendor_search_branch_branch_proto_depIdxs = nil
}
